package app;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;

/**
 *
 * @author prez
 */
public class App extends javax.swing.JFrame {
    private int contAsd;
    private int contError;
    private int contAux;
    private int contTotal;
    
    private String palabra;
    private int segundos;
    private HTMLDocument htmlDocument;
    private Thread hilo;

    public App() {
        initComponents();

        palabra = "asd";
        segundos = 5;

        contAsd = 0;
        contAux = 0;
        contError = 0;
        contTotal = 0;
        txtLog.setEditable(false);

        lblPalabra.setText(palabra);

//        System.out.println(Toolkit.getDefaultToolkit().getScreenSize());
//        
        this.setBounds(0, 0, 800, 600);
        this.setLocationRelativeTo(null);
        this.setTitle(palabra.toUpperCase()+"-Challenge");
//        this.setExtendedState(JFrame.MAXIMIZED_BOTH); 

        initF5();
        htmlDocument = (HTMLDocument) txtLog.getStyledDocument();
        htmlDocument.getStyleSheet().addRule(".error{color:red;}");
        reset();

        hilo = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtAsd = new javax.swing.JTextField();
        lblReloj = new javax.swing.JLabel();
        lblContOK = new javax.swing.JLabel();
        lblPalabra = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextPane();
        lblContError = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtAsd.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        txtAsd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAsdKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAsdKeyReleased(evt);
            }
        });

        lblReloj.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        lblReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblReloj.setText("5");
        lblReloj.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblContOK.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        lblContOK.setForeground(new java.awt.Color(0, 0, 153));
        lblContOK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblContOK.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblPalabra.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        lblPalabra.setForeground(new java.awt.Color(0, 0, 153));
        lblPalabra.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPalabra.setText("[Palabra]");
        lblPalabra.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtLog.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(txtLog);

        lblContError.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        lblContError.setForeground(new java.awt.Color(255, 0, 0));
        lblContError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblContError.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblTotal.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(0, 204, 51));
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jMenu1.setMnemonic('c');
        jMenu1.setText("Cambiar");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Palabra");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Segundos");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPalabra, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAsd)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblContOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblContError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblReloj, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                            .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPalabra)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtAsd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblContOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblContError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblReloj, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAsdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAsdKeyReleased


    }//GEN-LAST:event_txtAsdKeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        palabra = JOptionPane.showInputDialog("Palabra:");

        if (palabra == null) {
            palabra = "asd";
        } else if (palabra.trim().equals("")) {
            palabra = "asd";
        }
        lblPalabra.setText(palabra.trim());
        
        this.setTitle(palabra.toUpperCase()+"-Challenge");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            segundos = Integer.parseInt(JOptionPane.showInputDialog(this, "Segundos:"));
        } catch (HeadlessException | NumberFormatException e) {
            segundos = 5;
        }
        lblReloj.setText(String.valueOf(segundos));
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void txtAsdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAsdKeyPressed
        if (contAux == 0 && !txtAsd.getText().equals("")) {
            contAux = 1;
            hilo = new Thread(new Runnable() {

                @Override
                public void run() {
                    try {
                        for (int i = segundos; i > 0; i--) {

                            lblReloj.setText(String.valueOf(i));
                            Thread.sleep(1000);

                        }
                    } catch (InterruptedException ex) {
                        System.out.println("Interrumpido");
                    }

                    lblReloj.setText("F5 para reset");
                    txtAsd.setEditable(false);

                }
            });

            hilo.start();
        }

        if (txtAsd.isEditable()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                contTotal++;
                lblTotal.setText(String.valueOf(contTotal));

                if (txtAsd.getText().equals(palabra)) {
                    contAsd++;

                    try {
                        htmlDocument.insertAfterEnd(htmlDocument.getCharacterElement(htmlDocument.getLength()), contAsd + ") " + palabra + "<br>");
                    } catch (BadLocationException | IOException ex) {
                        Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    contError++;
                    
                    try {
                        htmlDocument.insertAfterEnd(htmlDocument.getCharacterElement(htmlDocument.getLength()), "<span class='error'>ERROR)</span> " + txtAsd.getText() + "<br>");
                    } catch (BadLocationException | IOException ex) {
                        Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                lblContOK.setText(String.valueOf(contAsd) + " ("+((contAsd*100)/contTotal)+"%)");
                lblContError.setText(String.valueOf(contError+ " ("+((contError*100)/contTotal)+"%)"));
                txtAsd.setText(null);
                txtAsd.requestFocus();
            }
        }
    }//GEN-LAST:event_txtAsdKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblContError;
    private javax.swing.JLabel lblContOK;
    private javax.swing.JLabel lblPalabra;
    private javax.swing.JLabel lblReloj;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTextField txtAsd;
    private javax.swing.JTextPane txtLog;
    // End of variables declaration//GEN-END:variables

    private void initF5() {
        /*CON CTRL + F y f3 funciona el buscar*/
        this.getRootPane().getInputMap(JRootPane.WHEN_IN_FOCUSED_WINDOW)
                .put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), "reset");
//        this.getRootPane().getInputMap(JRootPane.WHEN_IN_FOCUSED_WINDOW)
//                .put(KeyStroke.getKeyStroke(KeyEvent.VK_R, InputEvent.SHIFT_MASK), "reset");
//        /*CON CTRL + F y f3 funciona el buscar*/
//
        this.getRootPane().getActionMap().put("reset", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (hilo != null) {
                    if (hilo.isAlive()) {
                        hilo.interrupt();
                    }
                    txtLog.requestFocus();
                    reset();
                }
            }
        });
        /*Código para escuchar a un boton para todos los componentes*/
    }

    private void reset() {
        txtLog.setText(null);
        txtAsd.setText(null);
        lblContOK.setText("0");
        lblContError.setText("0");
        lblTotal.setText("0");
        lblReloj.setText(String.valueOf(segundos));
        txtAsd.setEditable(true);
        contAsd = 0;
        contAux = 0;
        contError = 0;
        contTotal = 0;
        txtAsd.requestFocus();
    }
}
